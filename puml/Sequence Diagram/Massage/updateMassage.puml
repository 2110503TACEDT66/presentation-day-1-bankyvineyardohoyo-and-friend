@startuml Manage Massage (PUT)

header Massage-Reservation-System Sequence Diagram
title "Manage Massage (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<routes>>\n:massageRouter" as massageRouter
participant "<<middlewares>>\n:authMiddleware" as authMiddleware
participant "<<controllers>>\n:massageController" as massageController
participant "<<models>>\n:MassageModel" as massageModel
database "<<MongoDB>>\n:massages" as massageDatabase

client -> server ++: req.put('/massages/:id')
server -> massageRouter ++: app.use('/massages', massages)
massageRouter -> authMiddleware ++: protect(), authorize("admin")
alt user is authenticated and\nreq.user.role is admin
    authMiddleware -> massageController ++: updateMassage()
    massageController -> massageModel ++: Massage.findById(req.params.id)
    massageModel -> massageDatabase ++: MassageSchema
    massageDatabase --> massageModel --: massage
    massageController <-- massageModel --: massage
    alt massage is not exist
        massageController -> client --: error response
    else massage is exist
        massageController -> massageModel ++: Massage.findByIdAndUpdate(req.params.id, req.body,\n{new: true, runValidators: true})
        massageModel -> massageDatabase ++: MassageSchema
        massageDatabase --> massageModel --: massage
        massageController <-- massageModel --: massage
        massageController -> client --: response
    end
else user is not authenticated or req.user.role is not admin
    authMiddleware -> client --: error response
end

@enduml